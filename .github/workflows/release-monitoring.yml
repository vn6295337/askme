name: Release Monitoring

on:
  schedule:
    # Run every 6 hours
    - cron: '0 */6 * * *'
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to monitor (e.g., 1.2.1)'
        required: true
        type: string

jobs:
  monitor-releases:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y jq curl
        
    - name: Get latest release version
      id: get_latest
      run: |
        if [[ -n "${{ github.event.inputs.version }}" ]]; then
          echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
        else
          # Get latest release from GitHub API
          LATEST_VERSION=$(curl -fsSL https://api.github.com/repos/${{ github.repository }}/releases/latest | jq -r '.tag_name' | sed 's/^v//')
          echo "VERSION=$LATEST_VERSION" >> $GITHUB_OUTPUT
        fi
        
    - name: Make monitoring script executable
      run: chmod +x 700_scripts/708_release_health_monitor.sh
      
    - name: Run health check
      id: health_check
      run: |
        ./700_scripts/708_release_health_monitor.sh ${{ steps.get_latest.outputs.VERSION }}
        echo "HEALTH_STATUS=$?" >> $GITHUB_OUTPUT
        
    - name: Upload health report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: health-report-v${{ steps.get_latest.outputs.VERSION }}
        path: monitoring/v${{ steps.get_latest.outputs.VERSION }}/health-report-v${{ steps.get_latest.outputs.VERSION }}.md
        
    - name: Create issue on failure
      if: steps.health_check.outputs.HEALTH_STATUS != '0'
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const version = '${{ steps.get_latest.outputs.VERSION }}';
          const reportPath = `monitoring/v${version}/health-report-v${version}.md`;
          
          let reportContent = 'Health report not available';
          if (fs.existsSync(reportPath)) {
            reportContent = fs.readFileSync(reportPath, 'utf8');
          }
          
          github.rest.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: `ðŸš¨ Release Health Check Failed - v${version}`,
            body: `# Release Health Check Failed
            
            **Version:** v${version}
            **Date:** ${new Date().toISOString()}
            **Workflow:** ${context.workflow}
            **Run:** ${context.runNumber}
            
            ## Health Report
            
            ${reportContent}
            
            ## Next Steps
            
            1. Review the health report above
            2. Check if the release assets are corrupted
            3. Verify backup distributions are available
            4. Consider regenerating the release if needed
            
            ## Auto-generated by Release Monitoring Workflow
            `,
            labels: ['bug', 'release', 'high-priority']
          });