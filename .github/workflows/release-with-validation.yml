name: Release with Validation

on:
  push:
    tags:
      - 'v*'  # Triggers on version tags like v1.0.0

jobs:
  build-and-validate:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Extract version from tag
      id: get_version
      run: echo "VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_OUTPUT
      
    - name: Make scripts executable
      run: |
        chmod +x 700_scripts/705_build_release_enhanced.sh
        chmod +x 300_implementation/askme-cli/gradlew
        
    - name: Build with integrity checks
      run: |
        ./700_scripts/705_build_release_enhanced.sh ${{ steps.get_version.outputs.VERSION }}
        
    - name: Validate build artifacts
      run: |
        # Verify all expected files exist
        if [[ ! -f "dist/askme-cli-v${{ steps.get_version.outputs.VERSION }}.tar.gz" ]]; then
          echo "ERROR: Main archive not found"
          exit 1
        fi
        
        if [[ ! -f "dist/askme-cli-v${{ steps.get_version.outputs.VERSION }}.sha256" ]]; then
          echo "ERROR: SHA256 checksum not found"
          exit 1
        fi
        
        if [[ ! -f "askme-distribution-backup-${{ steps.get_version.outputs.VERSION }}.tar.gz" ]]; then
          echo "ERROR: Backup distribution not found"
          exit 1
        fi
        
        # Run verification script
        cd dist
        ./verify-v${{ steps.get_version.outputs.VERSION }}.sh ${{ steps.get_version.outputs.VERSION }}
        cd ..
        
        echo "âœ… All build artifacts validated successfully"
        
    - name: Test distribution functionality
      run: |
        # Extract and test the distribution
        mkdir -p test-distribution
        cd test-distribution
        tar -xzf ../dist/askme-cli-v${{ steps.get_version.outputs.VERSION }}.tar.gz
        
        # Test basic functionality
        chmod +x askme-cli/bin/cliApp
        
        # Test help command (should not require network)
        timeout 30s ./askme-cli/bin/cliApp --help > help_output.txt
        
        # Verify help output contains expected content
        if ! grep -q "Usage:" help_output.txt; then
          echo "ERROR: Help output missing expected content"
          cat help_output.txt
          exit 1
        fi
        
        echo "âœ… Distribution functionality test passed"
        
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: AskMe CLI v${{ steps.get_version.outputs.VERSION }}
        body: |
          ## ðŸš€ AskMe CLI v${{ steps.get_version.outputs.VERSION }}
          
          âœ… **This release has been validated with comprehensive integrity checks**
          
          ### Quick Install & Verify
          ```bash
          # Download and verify
          curl -L -O https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.VERSION }}/askme-cli-v${{ steps.get_version.outputs.VERSION }}.tar.gz
          curl -L -O https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.VERSION }}/askme-cli-v${{ steps.get_version.outputs.VERSION }}.sha256
          curl -L -O https://github.com/${{ github.repository }}/releases/download/v${{ steps.get_version.outputs.VERSION }}/verify-v${{ steps.get_version.outputs.VERSION }}.sh
          
          # Verify integrity
          chmod +x verify-v${{ steps.get_version.outputs.VERSION }}.sh
          ./verify-v${{ steps.get_version.outputs.VERSION }}.sh ${{ steps.get_version.outputs.VERSION }}
          
          # Extract and use
          tar -xzf askme-cli-v${{ steps.get_version.outputs.VERSION }}.tar.gz
          chmod +x askme-cli/bin/cliApp
          ./askme-cli/bin/cliApp "Your question here"
          ```
          
          ### Alternative: Use Repository Backup
          If you encounter issues with the release archive, use the backup distribution:
          ```bash
          git clone https://github.com/${{ github.repository }}.git
          cd askme
          tar -xzf askme-distribution-backup-${{ steps.get_version.outputs.VERSION }}.tar.gz
          chmod +x askme-cli/bin/cliApp
          ./askme-cli/bin/cliApp "Your question here"
          ```
          
          ### What's New
          - Intelligent AI provider selection
          - Support for Google Gemini, Mistral AI, OpenAI, and Anthropic
          - Performance tracking and optimization
          - Enhanced integrity validation
          - Backup distribution methods
          
          ### Files Included
          - `askme-cli-v${{ steps.get_version.outputs.VERSION }}.tar.gz` - Main distribution
          - `askme-cli-v${{ steps.get_version.outputs.VERSION }}.sha256` - SHA256 checksum
          - `askme-cli-v${{ steps.get_version.outputs.VERSION }}.md5` - MD5 checksum
          - `verify-v${{ steps.get_version.outputs.VERSION }}.sh` - Verification script
          
          ### Documentation
          - [Installation Guide](https://github.com/${{ github.repository }}/blob/main/500_release/507_development_setup.md)
          - [User Guide](https://github.com/${{ github.repository }}/blob/main/500_release/505_user_guide.md)
          - [API Documentation](https://github.com/${{ github.repository }}/blob/main/500_release/506_api_docs.md)
        draft: false
        prerelease: false
        
    - name: Upload Main Archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/askme-cli-v${{ steps.get_version.outputs.VERSION }}.tar.gz
        asset_name: askme-cli-v${{ steps.get_version.outputs.VERSION }}.tar.gz
        asset_content_type: application/gzip
        
    - name: Upload SHA256 Checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/askme-cli-v${{ steps.get_version.outputs.VERSION }}.sha256
        asset_name: askme-cli-v${{ steps.get_version.outputs.VERSION }}.sha256
        asset_content_type: text/plain
        
    - name: Upload MD5 Checksum
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/askme-cli-v${{ steps.get_version.outputs.VERSION }}.md5
        asset_name: askme-cli-v${{ steps.get_version.outputs.VERSION }}.md5
        asset_content_type: text/plain
        
    - name: Upload Verification Script
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./dist/verify-v${{ steps.get_version.outputs.VERSION }}.sh
        asset_name: verify-v${{ steps.get_version.outputs.VERSION }}.sh
        asset_content_type: text/plain
        
    - name: Commit backup distribution to repository
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add "askme-distribution-backup-${{ steps.get_version.outputs.VERSION }}.tar.gz"
        git commit -m "Add backup distribution for v${{ steps.get_version.outputs.VERSION }}"
        git push