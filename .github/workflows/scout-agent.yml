name: Scout Agent - Model Validation

permissions:
  contents: write
  actions: read

on:
  workflow_dispatch:
    inputs:
      trigger_reason:
        description: 'Reason for manual trigger'
        required: true
        default: 'Manual validation request'
        type: choice
        options:
          - 'Manual validation request'
          - 'New model announcement'
          - 'Model deprecation notice'
          - 'API changes/updates'
          - 'Provider service changes'
          - 'Emergency validation'
      provider:
        description: 'Specific provider to validate (optional, leave empty for all)'
        required: false
        type: choice
        options:
          - ''
          - 'Gemini'
          - 'Mistral'
          - 'Together AI'
          - 'Cohere'
          - 'Groq'
          - 'Hugging Face'
          - 'OpenRouter'
          - 'AI21 Labs'
          - 'Replicate'
      announcement_url:
        description: 'URL to announcement/changelog (optional)'
        required: false
        type: string
  
  # Trigger on repository announcements via issues
  issues:
    types: [opened, edited]
  
  # Trigger on code changes
  push:
    branches:
      - feature/enhanced-filtering-sources
    paths:
      - 'scout-agent/**'
  
  # Webhook endpoint for external triggers
  repository_dispatch:
    types: [model-announcement, provider-update, api-deprecation]

jobs:
  validate-models:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Check trigger context
      run: |
        echo "üîç Validation Trigger Context:"
        echo "Event: ${{ github.event_name }}"
        
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          echo "Reason: ${{ github.event.inputs.trigger_reason }}"
          echo "Provider: ${{ github.event.inputs.provider || 'All providers' }}"
          echo "Announcement URL: ${{ github.event.inputs.announcement_url || 'Not provided' }}"
        elif [ "${{ github.event_name }}" = "issues" ]; then
          echo "Issue trigger detected - checking for model announcement keywords"
          issue_title="${{ github.event.issue.title }}"
          if echo "$issue_title" | grep -i -E "(model|deprecat|updat|new|announc|api)" > /dev/null; then
            echo "‚úÖ Model-related issue detected: $issue_title"
            echo "Issue URL: ${{ github.event.issue.html_url }}"
          else
            echo "‚ùå Issue not related to model announcements, skipping validation"
            exit 0
          fi
        elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          echo "External webhook trigger: ${{ github.event.action }}"
          echo "Payload: ${{ toJson(github.event.client_payload) }}"
        fi
        
        echo "Triggered by: ${{ github.actor }}"
        echo "Timestamp: $(date -u)"
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install dependencies
      working-directory: scout-agent
      run: npm install
      
    - name: Validate API keys availability
      working-directory: scout-agent
      run: node validate-secrets.js
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
        TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}
        COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        HUGGINGFACE_API_KEY: ${{ secrets.HUGGINGFACE_API_KEY }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        AI21_API_KEY: ${{ secrets.AI21_API_KEY }}
        REPLICATE_API_TOKEN: ${{ secrets.REPLICATE_API_TOKEN }}
        
    - name: Run model validation
      working-directory: scout-agent
      run: |
        echo "üöÄ Starting model validation..."
        
        # Set validation context
        export VALIDATION_TRIGGER="${{ github.event_name }}"
        export TRIGGER_REASON="${{ github.event.inputs.trigger_reason || 'Automated trigger' }}"
        export SPECIFIC_PROVIDER="${{ github.event.inputs.provider }}"
        export ANNOUNCEMENT_URL="${{ github.event.inputs.announcement_url }}"
        
        # Run validation with context
        node validate-models.js
      env:
        GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
        MISTRAL_API_KEY: ${{ secrets.MISTRAL_API_KEY }}
        TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}
        COHERE_API_KEY: ${{ secrets.COHERE_API_KEY }}
        GROQ_API_KEY: ${{ secrets.GROQ_API_KEY }}
        HUGGINGFACE_API_KEY: ${{ secrets.HUGGINGFACE_API_KEY }}
        OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        AI21_API_KEY: ${{ secrets.AI21_API_KEY }}
        REPLICATE_API_TOKEN: ${{ secrets.REPLICATE_API_TOKEN }}
        VALIDATION_TRIGGER: ${{ github.event_name }}
        TRIGGER_REASON: ${{ github.event.inputs.trigger_reason || 'Automated trigger' }}
        SPECIFIC_PROVIDER: ${{ github.event.inputs.provider }}
        ANNOUNCEMENT_URL: ${{ github.event.inputs.announcement_url }}
        
    - name: Upload validation results
      uses: actions/upload-artifact@v4
      with:
        name: model-validation-results
        path: |
          scout-agent/validated_models.json
          scout-agent/excluded_models.json
        retention-days: 30
        
    - name: Commit updated model data
      if: github.ref == 'refs/heads/feature/enhanced-filtering-sources'
      working-directory: scout-agent
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add validated_models.json excluded_models.json
        
        # Create context-aware commit message
        COMMIT_MSG="Update validated models data"
        
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          COMMIT_MSG="$COMMIT_MSG - ${{ github.event.inputs.trigger_reason }}"
          if [ -n "${{ github.event.inputs.provider }}" ]; then
            COMMIT_MSG="$COMMIT_MSG (${{ github.event.inputs.provider }})"
          fi
          if [ -n "${{ github.event.inputs.announcement_url }}" ]; then
            COMMIT_MSG="$COMMIT_MSG - ${{ github.event.inputs.announcement_url }}"
          fi
        elif [ "${{ github.event_name }}" = "repository_dispatch" ]; then
          COMMIT_MSG="$COMMIT_MSG - External trigger: ${{ github.event.action }}"
        elif [ "${{ github.event_name }}" = "issues" ]; then
          COMMIT_MSG="$COMMIT_MSG - Issue: ${{ github.event.issue.title }}"
        fi
        
        COMMIT_MSG="$COMMIT_MSG [skip ci]"
        
        if ! git diff --staged --quiet; then
          git commit -m "$COMMIT_MSG"
          git push origin feature/enhanced-filtering-sources
        else
          echo "No changes to commit"
        fi