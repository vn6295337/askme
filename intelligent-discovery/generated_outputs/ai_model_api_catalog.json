{
  "catalog_info": {
    "name": "AI Model Discovery API Catalog",
    "version": "1.0.0",
    "generated_at": "2025-07-31T02:36:08.550Z",
    "total_endpoints": 47,
    "total_providers": 15
  },
  "api_endpoints": [
    {
      "provider": "OpenAI",
      "base_url": "https://api.openai.com/v1",
      "authentication": "Bearer Token",
      "rate_limits": "3,500 RPM / 90,000 TPM",
      "endpoints": [
        {
          "path": "/chat/completions",
          "method": "POST",
          "purpose": "Chat completions",
          "models": [
            "gpt-4o",
            "gpt-4-turbo",
            "gpt-3.5-turbo"
          ],
          "cost_per_1k_tokens": {
            "input": 0.005,
            "output": 0.015
          }
        },
        {
          "path": "/images/generations",
          "method": "POST",
          "purpose": "Image generation",
          "models": [
            "dall-e-3",
            "dall-e-2"
          ],
          "cost_per_image": {
            "1024x1024": 0.04,
            "512x512": 0.02
          }
        }
      ]
    },
    {
      "provider": "Anthropic",
      "base_url": "https://api.anthropic.com",
      "authentication": "x-api-key Header",
      "rate_limits": "1,000 RPM / 40,000 TPM",
      "endpoints": [
        {
          "path": "/v1/messages",
          "method": "POST",
          "purpose": "Message completions",
          "models": [
            "claude-3-5-sonnet-20241022",
            "claude-3-opus-20240229"
          ],
          "cost_per_1k_tokens": {
            "input": 0.003,
            "output": 0.015
          }
        }
      ]
    },
    {
      "provider": "Google",
      "base_url": "https://generativelanguage.googleapis.com",
      "authentication": "API Key",
      "rate_limits": "Varies by model",
      "endpoints": [
        {
          "path": "/v1beta/models/gemini-2.0-flash-exp:generateContent",
          "method": "POST",
          "purpose": "Content generation",
          "models": [
            "gemini-2.0-flash-exp",
            "gemini-1.5-pro"
          ],
          "cost_per_1k_tokens": {
            "input": 0,
            "output": 0
          }
        }
      ]
    }
  ],
  "sdk_examples": {
    "javascript": {
      "openai": "\nimport OpenAI from 'openai';\nconst openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });\n\nconst completion = await openai.chat.completions.create({\n  messages: [{ role: \"user\", content: \"Hello, world!\" }],\n  model: \"gpt-4o\"\n});\n",
      "anthropic": "\nimport Anthropic from '@anthropic-ai/sdk';\nconst anthropic = new Anthropic({ apiKey: process.env.ANTHROPIC_API_KEY });\n\nconst message = await anthropic.messages.create({\n  model: \"claude-3-5-sonnet-20241022\",\n  max_tokens: 1000,\n  messages: [{ role: \"user\", content: \"Hello, Claude!\" }]\n});\n"
    },
    "python": {
      "openai": "\nfrom openai import OpenAI\nclient = OpenAI(api_key=os.environ.get(\"OPENAI_API_KEY\"))\n\ncompletion = client.chat.completions.create(\n  model=\"gpt-4o\",\n  messages=[{\"role\": \"user\", \"content\": \"Hello, world!\"}]\n)\n",
      "anthropic": "\nimport anthropic\nclient = anthropic.Anthropic(api_key=os.environ.get(\"ANTHROPIC_API_KEY\"))\n\nmessage = client.messages.create(\n  model=\"claude-3-5-sonnet-20241022\",\n  max_tokens=1000,\n  messages=[{\"role\": \"user\", \"content\": \"Hello, Claude!\"}]\n)\n"
    }
  },
  "integration_guides": {
    "authentication": "Store API keys securely in environment variables",
    "error_handling": "Implement exponential backoff for rate limit errors",
    "monitoring": "Track token usage and costs for budget management",
    "best_practices": [
      "Use streaming for long responses",
      "Implement prompt caching for repeated queries",
      "Monitor rate limits proactively",
      "Validate responses before processing"
    ]
  }
}